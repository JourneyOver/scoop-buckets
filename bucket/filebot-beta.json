{
    "version": "5.2.0-250902.0923",
    "description": "Movies, TV Shows and Anime files organizer and renamer",
    "homepage": "https://www.filebot.net/",
    "license": {
        "identifier": "Proprietary",
        "url": "https://www.filebot.net/eula.html"
    },
    "url": "https://get.filebot.net/filebot/BETA/FileBot_5.2.0-portable.zip",
    "hash": "0a950cc46cd8c2a647f4c966b0619d168777a06cba975db674f3fdef8b1e6278",
    "bin": "filebot.exe",
    "shortcuts": [
        [
            "filebot.launcher.exe",
            "FileBot"
        ]
    ],
    "persist": "data",
    "checkver": {
        "re": "(?<version>[\\w.]+)-(?<date>[\\w.]+)",
        "replace": "${version}-${date}",
        "script": [
            "try {",
            "    $url = 'https://get.filebot.net/filebot/BETA/'",
            "    $response = Invoke-WebRequest -Uri $url",
            "    $content = $response.Content",
            "    # Find the line containing the desired portable zip file",
            "    $line = ($content -split '\\r?\\n' | Where-Object { $_ -match 'FileBot_(?<version>[\\d.]+)-portable\\.zip' })[0]",
            "    # Extract the version and timestamp from that line",
            "    $filebotVersion = [regex]::Match($line, 'FileBot_(?<version>[\\d.]+)-portable\\.zip').Groups['version'].Value",
            "    $timestamp = [regex]::Match($line, '(?<date>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2})').Groups['date'].Value",
            "    $dateNumber = [DateTime]::ParseExact($timestamp, 'yyyy-MM-dd HH:mm', $null).ToString('yyMMdd.HHmm')",
            "    Write-Output \"$filebotVersion-$dateNumber\"",
            "} catch {",
            "    Write-Error $_.Exception.Message",
            "}"
        ]
    },
    "autoupdate": {
        "url": "https://get.filebot.net/filebot/BETA/FileBot_$matchVersion-portable.zip",
        "hash": {
            "url": "$url.sha256"
        }
    }
}
